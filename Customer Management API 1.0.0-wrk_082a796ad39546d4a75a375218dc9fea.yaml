type: spec.insomnia.rest/5.0
name: Customer Management API 1.0.0
meta:
  id: wrk_082a796ad39546d4a75a375218dc9fea
  created: 1751056176824
  modified: 1751056176824
  description: ""
collection:
  - name: customers
    meta:
      id: fld_95f34650f599412b9af8ad7a15c84a94
      created: 1751056195682
      modified: 1751056195682
      sortKey: -1751056195682
      description: Customer management operations
    children:
      - url: "{{ _.base_url }}/customers"
        name: List all customers
        meta:
          id: req_bf1e061b7bd04bf7b8164f049fd9d7d2
          created: 1751056195684
          modified: 1751056195684
          isPrivate: false
          description: Returns a list of all customers in the system
          sortKey: -1751056195684
        method: GET
        parameters:
          - name: status
            disabled: true
            value: string
          - name: limit
            disabled: true
            value: "20"
          - name: offset
            disabled: true
            value: "0"
        headers:
          - name: X-API-Key
            disabled: false
            value: "{{ _.xApiKey }}"
        authentication:
          type: basic
          username: "{{ _.httpUsername }}"
          password: "{{ _.httpPassword }}"
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/customers/{{ _.id }}"
        name: Get customer by ID
        meta:
          id: req_ca701ceeeeee4bda9c9ce7a32d94ec1b
          created: 1751056195685
          modified: 1751056195685
          isPrivate: false
          description: Returns a single customer by ID
          sortKey: -1751056195685
        method: GET
        headers:
          - name: X-API-Key
            disabled: false
            value: "{{ _.xApiKey }}"
        authentication:
          type: basic
          username: "{{ _.httpUsername }}"
          password: "{{ _.httpPassword }}"
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
  - name: addresses
    meta:
      id: fld_4c29589a67d24118b40b036d917fcdd0
      created: 1751056195683
      modified: 1751056195683
      sortKey: -1751056195683
      description: Customer address management operations
    children:
      - url: "{{ _.base_url }}/customers/{{ _.customerId }}/address"
        name: Get customer address
        meta:
          id: req_281d7b736c6547feb2b772d5b2fde2c5
          created: 1751056195685
          modified: 1751056195685
          isPrivate: false
          description: Get a customer's address details
          sortKey: -1751056195685
        method: GET
        headers:
          - name: X-API-Key
            disabled: false
            value: "{{ _.xApiKey }}"
        authentication:
          type: basic
          username: "{{ _.httpUsername }}"
          password: "{{ _.httpPassword }}"
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/customers/{{ _.customerId }}/address"
        name: Update customer address
        meta:
          id: req_49732ac802a14e10a077d0aeed2e5fbc
          created: 1751056195685
          modified: 1751056195685
          isPrivate: false
          description: Update a customer's address details
          sortKey: -1751056195685
        method: PUT
        body:
          mimeType: application/json
          text: |-
            {
              "street": "123 Main St",
              "city": "New York",
              "state": "NY",
              "postal_code": "10001",
              "country": "USA"
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
          - name: X-API-Key
            disabled: false
            value: "{{ _.xApiKey }}"
        authentication:
          type: basic
          username: "{{ _.httpUsername }}"
          password: "{{ _.httpPassword }}"
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/customers/{{ _.customerId }}/address"
        name: Delete customer address
        meta:
          id: req_9142d3d682284af3bc479ddd488f1f52
          created: 1751056195686
          modified: 1751056195686
          isPrivate: false
          description: Delete a customer's address
          sortKey: -1751056195686
        method: DELETE
        headers:
          - name: X-API-Key
            disabled: false
            value: "{{ _.xApiKey }}"
        authentication:
          type: basic
          username: "{{ _.httpUsername }}"
          password: "{{ _.httpPassword }}"
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
  - name: health
    meta:
      id: fld_dd37181ca4304efeb7f4c047f344fc9f
      created: 1751056195683
      modified: 1751056195683
      sortKey: -1751056195683
      description: Health check operations
cookieJar:
  name: Default Jar
  meta:
    id: jar_1ab32d4a2d0fb362e249ef3a2a34ecef68b8c244
    created: 1751056184081
    modified: 1751056184081
environments:
  name: Base Environment
  meta:
    id: env_1ab32d4a2d0fb362e249ef3a2a34ecef68b8c244
    created: 1751056184075
    modified: 1751056195680
    isPrivate: false
  data:
    base_url: "{{ _.scheme }}://{{ _.host }}{{ _.base_path }}"
  subEnvironments:
    - name: OpenAPI env localhost:8082
      meta:
        id: env_51f99f88aefa465695e9e50ccdd440b7
        created: 1751056195682
        modified: 1751056195682
        isPrivate: false
        sortKey: 1751056195682
      data:
        scheme: http
        base_path: /api/v1
        host: localhost:8082
        xApiKey: xApiKey
        httpUsername: username
        httpPassword: password
        oauth2ClientId: clientId
        oauth2RedirectUrl: http://localhost/
spec:
  contents:
    openapi: 3.0.0
    info:
      title: Customer Management API
      version: 1.0.0
      description: A clean, well-documented API service for customer management
      termsOfService: http://example.com/terms/
      contact:
        name: API Support
        url: http://example.com/support
        email: support@example.com
      license:
        name: MIT
        url: http://opensource.org/licenses/MIT
    servers:
      - url: http://localhost:8082/api/v1
        description: Local development server
    security:
      - OAuth2:
          - read
          - write
    paths:
      /customers:
        get:
          summary: List all customers
          description: Returns a list of all customers in the system
          operationId: listCustomers
          tags:
            - customers
          parameters:
            - name: status
              in: query
              description: Filter customers by status
              required: false
              schema:
                type: string
                enum:
                  - active
                  - inactive
                  - pending
            - name: limit
              in: query
              description: Maximum number of records to return
              required: false
              schema:
                type: integer
                minimum: 1
                maximum: 100
                default: 20
            - name: offset
              in: query
              description: Number of records to skip
              required: false
              schema:
                type: integer
                minimum: 0
                default: 0
          responses:
            "200":
              description: List of customers
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
            "401":
              $ref: "#/components/responses/Unauthorized"
            "500":
              $ref: "#/components/responses/InternalError"
      /customers/{id}:
        get:
          summary: Get customer by ID
          description: Returns a single customer by ID
          operationId: getCustomerById
          tags:
            - customers
          parameters:
            - name: id
              in: path
              description: Customer ID
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
          responses:
            "200":
              description: Customer found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Customer"
            "404":
              $ref: "#/components/responses/NotFound"
      /customers/{customerId}/address:
        get:
          summary: Get customer address
          description: Get a customer's address details
          operationId: getCustomerAddress
          tags:
            - addresses
          parameters:
            - name: customerId
              in: path
              description: Customer ID
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
          responses:
            "200":
              description: Address details
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Address"
                  example:
                    street: 123 Main St
                    city: New York
                    state: NY
                    postal_code: "10001"
                    country: USA
            "404":
              $ref: "#/components/responses/NotFound"
        put:
          summary: Update customer address
          description: Update a customer's address details
          operationId: updateCustomerAddress
          tags:
            - addresses
          parameters:
            - name: customerId
              in: path
              description: Customer ID
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Address"
                example:
                  street: 123 Main St
                  city: New York
                  state: NY
                  postal_code: "10001"
                  country: USA
          responses:
            "200":
              description: Address updated successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Address"
            "400":
              $ref: "#/components/responses/ValidationError"
            "404":
              $ref: "#/components/responses/NotFound"
        delete:
          summary: Delete customer address
          description: Delete a customer's address
          operationId: deleteCustomerAddress
          tags:
            - addresses
          parameters:
            - name: customerId
              in: path
              description: Customer ID
              required: true
              schema:
                type: integer
                format: int64
                minimum: 1
          responses:
            "204":
              description: Address deleted successfully
            "404":
              $ref: "#/components/responses/NotFound"
    components:
      schemas:
        Customer:
          type: object
          required:
            - id
            - first_name
            - last_name
            - email
          properties:
            id:
              type: integer
              format: int64
              minimum: 1
              example: 1
              description: Unique identifier of the customer
            first_name:
              type: string
              minLength: 2
              maxLength: 50
              example: John
              description: Customer's first name
            last_name:
              type: string
              minLength: 2
              maxLength: 50
              example: Doe
              description: Customer's last name
            email:
              type: string
              format: email
              example: john.doe@example.com
              description: Customer's email address
              pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
            phone:
              type: string
              example: 123-456-7890
              description: Customer's phone number
              pattern: ^[0-9]{3}-[0-9]{3}-[0-9]{4}$
            status:
              type: string
              enum:
                - active
                - inactive
                - pending
              example: active
              description: Customer's current status
            address:
              $ref: "#/components/schemas/Address"
            created_at:
              type: string
              format: date-time
              example: 2024-03-21T10:00:00Z
              description: Timestamp when the customer was created
            updated_at:
              type: string
              format: date-time
              example: 2024-03-21T10:00:00Z
              description: Timestamp when the customer was last updated
        Address:
          type: object
          required:
            - street
            - city
            - state
            - postal_code
            - country
          properties:
            street:
              type: string
              minLength: 5
              maxLength: 100
              example: 123 Main St
              description: Street address
            city:
              type: string
              minLength: 2
              maxLength: 50
              example: New York
              description: City name
            state:
              type: string
              minLength: 2
              maxLength: 2
              pattern: ^[A-Z]{2}$
              example: NY
              description: State code
            postal_code:
              type: string
              pattern: ^\d{5}(-\d{4})?$
              example: "10001"
              description: Postal code
            country:
              type: string
              minLength: 2
              maxLength: 3
              pattern: ^[A-Z]{2,3}$
              example: USA
              description: Country code
        ValidationError:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid address data
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: street
                  message:
                    type: string
                    example: Street must be at least 5 characters long
      responses:
        NotFound:
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
              example:
                code: NOT_FOUND
                message: Resource not found
        ValidationError:
          description: Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        Unauthorized:
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
              example:
                code: UNAUTHORIZED
                message: Authentication required
        InternalError:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
              example:
                code: INTERNAL_ERROR
                message: An unexpected error occurred
      securitySchemes:
        BasicAuth:
          type: http
          scheme: basic
          description: Basic authentication for API access
        ApiKeyAuth:
          type: apiKey
          in: header
          name: X-API-Key
          description: API key authentication
        OAuth2:
          type: oauth2
          flows:
            implicit:
              authorizationUrl: https://example.com/oauth2/authorize
              scopes:
                read: Grants read access
                write: Grants write access
                admin: Grants admin access
    tags:
      - name: customers
        description: Customer management operations
      - name: addresses
        description: Customer address management operations
      - name: health
        description: Health check operations
  meta:
    id: spc_f065a17e3a3e41f3b89378a9e4cadc7e
    created: 1751056176827
    modified: 1751056176827
